{"version":3,"file":"browser_ethereum_shim_raw.js","sources":["../src/browser_ethereum_shim.ts"],"sourcesContent":["export {};\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n    ReactNativeWebView: any;\n  }\n}\nwindow.ethereum = {\n  isMetaMask: false,\n  autoRefreshOnNetworkChange: false,\n  isConnected,\n  on,\n  once,\n  off,\n  addListener: on,\n  removeListener: off,\n  removeAllListeners,\n  send,\n  sendAsync,\n  enable,\n  request,\n  _resolveRequest,\n  _rejectRequest,\n  emit,\n};\nfunction isConnected() {\n  return true;\n}\n\ntype Listener = (message: any) => void;\n\nfunction on(event: string, listener: Listener) {\n  _getEventHandler(event).on_list.push(listener);\n  return window.ethereum;\n}\nfunction once(event: string, listener: Listener) {\n  _getEventHandler(event).once_list.push(listener);\n  return window.ethereum;\n}\nfunction off(event: string, listener: Listener) {\n  const handler = _getEventHandler(event);\n  _filterInPlace(handler.on_list, (callback) => callback === listener);\n  _filterInPlace(handler.once_list, (callback) => callback === listener);\n  return window.ethereum;\n}\nfunction removeAllListeners(event: string) {\n  const handler = _getEventHandler(event);\n  handler.on_list = [];\n  handler.once_list = [];\n  return window.ethereum;\n}\nfunction emit(event: string, message: any) {\n  const handler = _getEventHandler(event);\n  const { once_list, on_list } = handler;\n  handler.once_list = [];\n  on_list.forEach((callback) => callback(message));\n  once_list.forEach((callback) => callback(message));\n}\n\n// stupid old dapps require these because no one ever updates code\nfunction send(method: string, params?: any[]) {\n  return request({ method, params });\n}\nfunction sendAsync(payload: any, done: (err?: any, result?: any) => unknown) {\n  request(payload).then(\n    (result) => done(null, result),\n    (err) => done(err)\n  );\n}\nfunction enable() {\n  return request({ method: 'eth_requestAccounts' });\n}\n\ntype Executor = {\n  resolve: (result: any) => void;\n  reject: (error: any) => void;\n};\nlet g_requestId = 1;\nconst g_executorMap = new Map<number, Executor>();\nfunction request(args: any) {\n  return new Promise((resolve, reject) => {\n    const requestId = g_requestId++;\n    try {\n      g_executorMap.set(requestId, {\n        resolve,\n        reject,\n      });\n      const obj = {\n        requestId,\n        args,\n      };\n      const obj_s = JSON.stringify(obj);\n      window.ReactNativeWebView.postMessage(obj_s);\n    } catch (e) {\n      _rejectRequest(requestId, e);\n    }\n  });\n}\nfunction _resolveRequest(requestId: number, result: any) {\n  const executor = g_executorMap.get(requestId);\n  if (executor) {\n    g_executorMap.delete(requestId);\n    executor.resolve(result);\n  }\n}\nfunction _rejectRequest(requestId: number, result: any) {\n  const executor = g_executorMap.get(requestId);\n  if (executor) {\n    g_executorMap.delete(requestId);\n    executor.reject(result);\n  }\n}\ntype Handler = {\n  on_list: Listener[];\n  once_list: Listener[];\n};\nconst g_eventHandlerMap = new Map<string, Handler>();\nfunction _getEventHandler(event: string): Handler {\n  let ret = g_eventHandlerMap.get(event);\n  if (!ret) {\n    ret = {\n      on_list: [],\n      once_list: [],\n    };\n    g_eventHandlerMap.set(event, ret);\n  }\n  return ret;\n}\nfunction _filterInPlace(array: any[], callback: (a: any, b: any) => boolean) {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (!callback(array[i], i)) {\n      array.splice(i, 1);\n    }\n  }\n}\n"],"names":["on","event","listener","_getEventHandler","on_list","push","window","ethereum","off","handler","_filterInPlace","callback","once_list","isMetaMask","autoRefreshOnNetworkChange","isConnected","once","addListener","removeListener","removeAllListeners","send","method","params","request","sendAsync","payload","done","then","result","err","enable","_resolveRequest","requestId","executor","g_executorMap","get","delete","resolve","_rejectRequest","emit","message","forEach","g_requestId","Map","args","Promise","reject","set","obj","obj_s","JSON","stringify","ReactNativeWebView","postMessage","e","g_eventHandlerMap","ret","array","i","length","splice"],"mappings":"2FAgCA,SAASA,EAAGC,EAAeC,GAEzB,OADAC,EAAiBF,GAAOG,QAAQC,KAAKH,GAC9BI,OAAOC,SAMhB,SAASC,EAAIP,EAAeC,GAC1B,MAAMO,EAAUN,EAAiBF,GAGjC,OAFAS,EAAeD,EAAQL,SAAUO,GAAaA,IAAaT,IAC3DQ,EAAeD,EAAQG,WAAYD,GAAaA,IAAaT,IACtDI,OAAOC,SApChBD,OAAOC,SAAW,CAChBM,YAAY,EACZC,4BAA4B,EAC5BC,YAeF,WACE,OAAO,GAfPf,GAAAA,EACAgB,KAuBF,SAAcf,EAAeC,GAE3B,OADAC,EAAiBF,GAAOW,UAAUP,KAAKH,GAChCI,OAAOC,UAxBdC,IAAAA,EACAS,YAAajB,EACbkB,eAAgBV,EAChBW,mBA6BF,SAA4BlB,GAC1B,MAAMQ,EAAUN,EAAiBF,GAGjC,OAFAQ,EAAQL,QAAU,GAClBK,EAAQG,UAAY,GACbN,OAAOC,UAhCda,KA2CF,SAAcC,EAAgBC,GAC5B,OAAOC,EAAQ,CAAEF,OAAAA,EAAQC,OAAAA,KA3CzBE,UA6CF,SAAmBC,EAAcC,GAC/BH,EAAQE,GAASE,MACdC,GAAWF,EAAK,KAAME,KACtBC,GAAQH,EAAKG,MA/ChBC,OAkDF,WACE,OAAOP,EAAQ,CAAEF,OAAQ,yBAlDzBE,QAAAA,EACAQ,gBA6EF,SAAyBC,EAAmBJ,GAC1C,MAAMK,EAAWC,EAAcC,IAAIH,GAC/BC,IACFC,EAAcE,OAAOJ,GACrBC,EAASI,QAAQT,KAhFnBU,eAAAA,EACAC,KA4BF,SAActC,EAAeuC,GAC3B,MAAM/B,EAAUN,EAAiBF,IAC3BW,UAAEA,EAASR,QAAEA,GAAYK,EAC/BA,EAAQG,UAAY,GACpBR,EAAQqC,SAAS9B,GAAaA,EAAS6B,KACvC5B,EAAU6B,SAAS9B,GAAaA,EAAS6B,OAqB3C,IAAIE,EAAc,EAClB,MAAMR,EAAgB,IAAIS,IAC1B,SAASpB,EAAQqB,GACf,OAAO,IAAIC,SAAQ,CAACR,EAASS,KAC3B,MAAMd,EAAYU,IAClB,IACER,EAAca,IAAIf,EAAW,CAC3BK,QAAAA,EACAS,OAAAA,IAEF,MAAME,EAAM,CACVhB,UAAAA,EACAY,KAAAA,GAEIK,EAAQC,KAAKC,UAAUH,GAC7B1C,OAAO8C,mBAAmBC,YAAYJ,GACtC,MAAOK,GACPhB,EAAeN,EAAWsB,OAWhC,SAAShB,EAAeN,EAAmBJ,GACzC,MAAMK,EAAWC,EAAcC,IAAIH,GAC/BC,IACFC,EAAcE,OAAOJ,GACrBC,EAASa,OAAOlB,IAOpB,MAAM2B,EAAoB,IAAIZ,IAC9B,SAASxC,EAAiBF,GACxB,IAAIuD,EAAMD,EAAkBpB,IAAIlC,GAQhC,OAPKuD,IACHA,EAAM,CACJpD,QAAS,GACTQ,UAAW,IAEb2C,EAAkBR,IAAI9C,EAAOuD,IAExBA,EAET,SAAS9C,EAAe+C,EAAc9C,GACpC,IAAK,IAAI+C,EAAID,EAAME,OAAS,EAAGD,GAAK,EAAGA,IAChC/C,EAAS8C,EAAMC,GAAIA,IACtBD,EAAMG,OAAOF,EAAG"}